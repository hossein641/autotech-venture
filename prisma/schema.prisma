// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  title     String?
  role      Role     @default(AUTHOR)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     BlogPost[]

  @@map("users")
}

model BlogPost {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  excerpt         String
  content         String
  featuredImage   String?
  publishedAt     DateTime?
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  readTime        Int       @default(5)
  featured        Boolean   @default(false)
  status          PostStatus @default(DRAFT)
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  keywords        String   @default("")  // SQLite doesn't support arrays, use JSON string
  
  // Foreign keys
  authorId        String
  categoryId      String
  
  // Relations
  author          User      @relation(fields: [authorId], references: [id])
  category        Category  @relation(fields: [categoryId], references: [id])
  tags            PostTag[]
  
  @@map("blog_posts")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?    @default("#6366f1")
  createdAt   DateTime   @default(now())
  
  // Relations
  posts       BlogPost[]
  
  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  
  // Relations
  posts     PostTag[]
  
  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  
  // Relations
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tagId])
  @@map("post_tags")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}